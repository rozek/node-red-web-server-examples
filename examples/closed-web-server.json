[
    {
        "id": "4ae46027c10e9ce3",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "closed file-based Web Server (with Cookie-based Authorization)",
        "info": "",
        "x": 250,
        "y": 100,
        "wires": []
    },
    {
        "id": "56f2b41a59a6eaaf",
        "type": "http in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "url": "closed-web-server",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "3a6e6a0bd1908dc7"
            ]
        ]
    },
    {
        "id": "e3c5371b6a2d2587",
        "type": "http in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "url": "closed-web-server/:Path(*)",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "1bc9130bfe47b1ce"
            ]
        ]
    },
    {
        "id": "3a6e6a0bd1908dc7",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "set Path",
        "rules": [
            {
                "t": "set",
                "p": "req.params.Path",
                "pt": "msg",
                "to": "/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "1bc9130bfe47b1ce"
            ]
        ]
    },
    {
        "id": "9dd4030d85f45096",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "2ff56d89dd751cfc",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "online Methods for User Management",
        "info": "",
        "x": 170,
        "y": 360,
        "wires": []
    },
    {
        "id": "f35ffd8c2a941abe",
        "type": "http in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "url": "closed-web-server/set-password",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "dcc1da0cb6a67d09"
            ]
        ]
    },
    {
        "id": "4a04a1b60c301ffd",
        "type": "http in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "url": "closed-web-server/delete-user",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "abf3f2a8de59aebe"
            ]
        ]
    },
    {
        "id": "dcc1da0cb6a67d09",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "allow if no password set",
        "func": "let Body = msg.req.body || {}\n\nlet UserId   = (Body.UserId  || '').toLowerCase()\nlet Password = Body.Password || ''\n\nlet UserRegistry = (global.get('UserRegistry') || Object.create(null))\nif ((UserId in UserRegistry) && (UserRegistry[UserId] == null)) {\n  return [msg,null] // allow password reset\n}\n\nreturn [null,msg] // require authorization\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 480,
        "wires": [
            [
                "9d2993165c9031c3"
            ],
            [
                "c6b8fe651b5d9e1a"
            ]
        ]
    },
    {
        "id": "9d2993165c9031c3",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "set password",
        "func": "const twoMinutes = 2*60*1000\n\nlet Body = msg.req.body || {}\n  let UserId   = (Body.UserId  || '').toLowerCase()\n  let Password = Body.Password || ''\n\n  if (UserId === '') {\n    msg.payload    = 'Bad Request: missing userid'\n    msg.statusCode = 400\n    return [null,msg]\n  }\n  \n  if (Password.length < 8) {\n    msg.payload    = 'Bad Request: password too short'\n    msg.statusCode = 400\n    return [null,msg]\n  }\n  \n  let PBKDF2Iterations = global.get('PBKDF2Iterations') || 100000\n\n  let PasswordSalt = crypto.randomBytes(16)\n  let PasswordHash = crypto.pbkdf2Sync(\n    Password, PasswordSalt, PBKDF2Iterations, 64, 'sha512'\n  )\n  \n  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n    UserRegistry[UserId] = UserRegistry[UserId] || {}\n    UserRegistry[UserId].Salt = PasswordSalt.toString('hex')\n    UserRegistry[UserId].Hash = PasswordHash.toString('hex')\n  global.set('UserRegistry',UserRegistry)\nmsg.cookies = { authorization:null }\n\nmsg.payload    = 'No Content'\nmsg.statusCode = 204\nreturn [msg,null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 140,
        "y": 540,
        "wires": [
            [
                "e79264b784896a31"
            ],
            [
                "cd689836f2965f20"
            ]
        ]
    },
    {
        "id": "cd689836f2965f20",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "http",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 540,
        "wires": []
    },
    {
        "id": "abf3f2a8de59aebe",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "skip if unused",
        "func": "let Body = msg.req.body || {}\n\nlet UserId = (Body.UserId || '').toLowerCase()\nif (UserId === '') {\n  msg.payload    = 'Bad Request: missing userid'\n  msg.statusCode = 400\n  return [null,null,msg]\n}\n\nlet UserRegistry = global.get('UserRegistry') || Object.create(null)\nif (! (UserId in UserRegistry)) {\n  msg.payload    = 'No Content'\n  msg.statusCode = 204\n  return [null,null,msg]\n}\n\nif (UserRegistry[UserId] == null) {\n  return [msg,null,null] // allow removal w/o authorization\n} else {\n  return [null,msg,null] // require authorization\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 140,
        "y": 660,
        "wires": [
            [
                "58ca10af96f0ad31"
            ],
            [
                "a5bb2fae82fb060e"
            ],
            [
                "410cd89e0af369f3"
            ]
        ]
    },
    {
        "id": "58ca10af96f0ad31",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "delete user",
        "func": "let Body = msg.req.body || {}\n  let UserId = (Body.UserId || '').toLowerCase()\n\n  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n    delete UserRegistry[UserId]\n  global.set('UserRegistry',UserRegistry)\nmsg.cookies = { authentication: '' }\n\nmsg.payload    = 'No Content'\nmsg.statusCode = 204\nreturn [msg,null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 130,
        "y": 720,
        "wires": [
            [
                "4c6cdd3342ce4bc9"
            ],
            [
                "410cd89e0af369f3"
            ]
        ]
    },
    {
        "id": "410cd89e0af369f3",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "http",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "3e99601e442e0368",
        "type": "http in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "url": "closed-web-server/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "cd044e23aa4655ac"
            ]
        ]
    },
    {
        "id": "9783beb2630ae8b7",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "204",
        "headers": {},
        "x": 520,
        "y": 760,
        "wires": []
    },
    {
        "id": "b785ad6f4e3503fa",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 520,
        "y": 800,
        "wires": []
    },
    {
        "id": "40a3c7a34f053d97",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "req.params.Path",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "c311beadf96becde"
            ]
        ]
    },
    {
        "id": "b8c6250c90bbed04",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "offline Methods for User Management",
        "info": "",
        "x": 170,
        "y": 860,
        "wires": []
    },
    {
        "id": "c32298dfe46ad556",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "delete user",
        "props": [
            {
                "p": "UserId",
                "v": "John.Doe@mail.de",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1100,
        "wires": [
            [
                "814f545ff963cecc"
            ]
        ]
    },
    {
        "id": "6edce1733b761832",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'user set updated'",
        "statusType": "jsonata",
        "x": 530,
        "y": 1040,
        "wires": []
    },
    {
        "id": "814f545ff963cecc",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "update global context",
        "func": "let UserId = (msg.UserId || '').toLowerCase()\n  if (UserId.trim() === '') {\n    node.status({ fill:'red',shape:'dot',text:'missing user id'})\n    return null\n  }\n\n  if (/[:\\x00-\\x1f\\x7f]/.test(UserId)) {\n    node.status({ fill:'red',shape:'dot',text:'invalid user id'})\n    return null\n  }\n  \n  if (UserId.length > 2047) {\n    node.status({ fill:'red',shape:'dot',text:'user id too long'})\n    return null\n  }\n\n  node.status({})\nlet UserRegistry = global.get('UserRegistry') || Object.create(null)\n  delete UserRegistry[UserId]\nglobal.set('UserRegistry',UserRegistry)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "a4c7a577f4a885ac"
            ]
        ]
    },
    {
        "id": "dc1e3a8e0b560a77",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "(re)set user",
        "props": [
            {
                "p": "UserId",
                "v": "John.Doe@mail.de",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "b03779e7769e2ad0"
            ]
        ]
    },
    {
        "id": "b03779e7769e2ad0",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "update global context",
        "func": "let UserId = (msg.UserId || '').toLowerCase()\n  if (UserId.trim() === '') {\n    node.status({ fill:'red',shape:'dot',text:'missing user id'})\n    return null\n  }\n\n  if (/[:\\x00-\\x1f\\x7f]/.test(UserId)) {\n    node.status({ fill:'red',shape:'dot',text:'invalid user id'})\n    return null\n  }\n  \n  if (UserId.length > 2047) {\n    node.status({ fill:'red',shape:'dot',text:'user id too long'})\n    return null\n  }\n\n  node.status({})\nlet UserRegistry = global.get('UserRegistry') || Object.create(null)\n  UserRegistry[UserId] = null // i.e., part of registry, but yet w/o settings\nglobal.set('UserRegistry',UserRegistry)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "a4c7a577f4a885ac"
            ]
        ]
    },
    {
        "id": "40e8f47d151dcfdf",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "list users",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 920,
        "wires": [
            [
                "908896979f346b80"
            ]
        ]
    },
    {
        "id": "908896979f346b80",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "build from global context",
        "func": "let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  let UserList = []\n  for (let UserId in UserRegistry) {\n    UserList.push(\n      UserRegistry[UserId] == null ? '[' + UserId + ']' : UserId\n    )\n  }\nmsg.payload = (\n  UserList.length === 0\n  ? '(no user registered)'\n  : 'registered users: \"' + UserList.join('\",\"') + '\"'\n)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 310,
        "y": 920,
        "wires": [
            [
                "26ea0e3442ae42bb"
            ]
        ]
    },
    {
        "id": "26ea0e3442ae42bb",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "show",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 920,
        "wires": []
    },
    {
        "id": "c311beadf96becde",
        "type": "link out",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "links": [
            "1bdc717ca4961131"
        ],
        "x": 475,
        "y": 280,
        "wires": []
    },
    {
        "id": "1bdc717ca4961131",
        "type": "link in",
        "z": "80deaf3fb9cfc52d",
        "name": "entry point for custom Web Server",
        "links": [
            "c311beadf96becde"
        ],
        "x": 1355,
        "y": 160,
        "wires": [
            [
                "777a7b089bb317ca"
            ]
        ]
    },
    {
        "id": "4a669847d94308b0",
        "type": "file in",
        "z": "80deaf3fb9cfc52d",
        "name": "./public/<FilePath>",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1690,
        "y": 220,
        "wires": [
            [
                "6f03f71d9e4a060e"
            ]
        ]
    },
    {
        "id": "7915ea96b716fd0b",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1840,
        "y": 520,
        "wires": []
    },
    {
        "id": "bf62212eb6df529c",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "777a7b089bb317ca"
        ],
        "uncaught": false,
        "x": 1430,
        "y": 260,
        "wires": [
            [
                "108ba91e9e09f885"
            ]
        ]
    },
    {
        "id": "0ed5440d2e9ec7fc",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "Bad Request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Bad Request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 360,
        "wires": [
            [
                "f8f2b6ad609adaf2"
            ]
        ]
    },
    {
        "id": "f8f2b6ad609adaf2",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1850,
        "y": 360,
        "wires": []
    },
    {
        "id": "108ba91e9e09f885",
        "type": "switch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^Error:.ENOENT",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "^Error:.EISDIR",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1470,
        "y": 340,
        "wires": [
            [
                "9663d6915dd28f41"
            ],
            [
                "e15c542c11a1295c"
            ],
            [
                "0ed5440d2e9ec7fc"
            ]
        ]
    },
    {
        "id": "9663d6915dd28f41",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "404",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Not Found",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "404",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "f8f2b6ad609adaf2",
                "2f71f95b3eb3f003"
            ]
        ]
    },
    {
        "id": "777a7b089bb317ca",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "normalize filename",
        "func": "let FilePath = msg.filename.trim()\n  .replace(/^\\/+/,'')     // remove any leading \"/\"\n  .replace(/\\/+$/,'')     // remove trailing \"/\"s\n  .replace(/\\/\\/+/g,'/')  // reduce multiple \"/\"\n\n  let PathList = FilePath.split('/'), Result = []\n  Loop: for (let i = 0, l = PathList.length; i < l; i++) {\n    let PathItem = PathList[i].trim()\n    switch (PathItem) {\n      case '.':  break\n      case '..': if (Result.length === 0) {\n                   break Loop\n                 } else {\n                   Result.pop()\n                 }\n                 break\n      default:   Result.push(PathItem)\n    }\n  }\n  if (Result.length === 0) {\n    throw new Error('ENOENT')\n  }\nmsg.filename = './public/' + Result.join('/')\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 220,
        "wires": [
            [
                "4a669847d94308b0"
            ]
        ]
    },
    {
        "id": "eb546102b4e048ed",
        "type": "file in",
        "z": "80deaf3fb9cfc52d",
        "name": "./public/<FilePath>",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1710,
        "y": 420,
        "wires": [
            [
                "cb8ddabea0f12bbc"
            ]
        ]
    },
    {
        "id": "be773787b52ec2c3",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "eb546102b4e048ed"
        ],
        "uncaught": false,
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "446574b15acd23a5"
            ]
        ]
    },
    {
        "id": "446574b15acd23a5",
        "type": "switch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^Error:.ENOENT",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 460,
        "wires": [
            [
                "9663d6915dd28f41"
            ],
            [
                "0ed5440d2e9ec7fc"
            ]
        ]
    },
    {
        "id": "759d18bec2b4d331",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "4a669847d94308b0"
        ],
        "uncaught": false,
        "x": 1650,
        "y": 260,
        "wires": [
            [
                "108ba91e9e09f885"
            ]
        ]
    },
    {
        "id": "6f03f71d9e4a060e",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "set Content-Type",
        "func": "let FileTypeMappings = flow.get('FileTypeMappings') || {}\n\nlet FileSuffix  = (/[.][^.]+$/.exec(msg.filename) || [])[0] || ''\nlet ContentType = FileTypeMappings[FileSuffix] || 'application/octet-stream'\n\nmsg.headers = msg.headers || {}\n  msg.headers['Content-Type'] = ContentType\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 520,
        "wires": [
            [
                "7915ea96b716fd0b",
                "8b201a8e7cc69dc2"
            ]
        ]
    },
    {
        "id": "5bf622e415da39fe",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1430,
        "y": 780,
        "wires": [
            [
                "2277b95d45f4c5c0"
            ]
        ]
    },
    {
        "id": "2277b95d45f4c5c0",
        "type": "file in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "filename": "./FileTypeMappings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1630,
        "y": 780,
        "wires": [
            [
                "58e0939136d6b497"
            ]
        ]
    },
    {
        "id": "58e0939136d6b497",
        "type": "json",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1450,
        "y": 840,
        "wires": [
            [
                "a384b9e706c5a694"
            ]
        ]
    },
    {
        "id": "a384b9e706c5a694",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "save in flow context",
        "rules": [
            {
                "t": "set",
                "p": "FileTypeMappings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 840,
        "wires": [
            [
                "9fa0e3127a6e58d1"
            ]
        ]
    },
    {
        "id": "0a39d141f8753b00",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "2277b95d45f4c5c0",
            "58e0939136d6b497"
        ],
        "uncaught": false,
        "x": 1450,
        "y": 880,
        "wires": [
            [
                "a695db477a00d865"
            ]
        ]
    },
    {
        "id": "a695db477a00d865",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not load mappings'",
        "statusType": "jsonata",
        "x": 1590,
        "y": 880,
        "wires": []
    },
    {
        "id": "a3fbb11302c3b863",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "FileTypeMappings.json maps File Suffixes to MIME-Types",
        "info": "",
        "x": 1550,
        "y": 720,
        "wires": []
    },
    {
        "id": "1b30a587a09765bd",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 1420,
        "y": 620,
        "wires": [
            [
                "f4a582ef3da8f7a6",
                "0521a7e402803588"
            ]
        ]
    },
    {
        "id": "f4a582ef3da8f7a6",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "internal Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Internal Server Error",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 620,
        "wires": [
            [
                "ce421eb1518eac12"
            ]
        ]
    },
    {
        "id": "ce421eb1518eac12",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1840,
        "y": 620,
        "wires": []
    },
    {
        "id": "0521a7e402803588",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "show error on console",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 660,
        "wires": []
    },
    {
        "id": "2f71f95b3eb3f003",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'file not found: ' & msg.filename",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 320,
        "wires": []
    },
    {
        "id": "9fa0e3127a6e58d1",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'mappings loaded'",
        "statusType": "jsonata",
        "x": 1830,
        "y": 840,
        "wires": []
    },
    {
        "id": "cb8ddabea0f12bbc",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "set Location",
        "func": "let completeURL = msg.req.url\nlet URLPrefix   = /^\\/[^\\/]+/.exec(completeURL)[0]\n\nmsg.headers = msg.headers || {}\n  let Location = msg.filename.replace('./public',URLPrefix)\n  msg.headers['Location'] = Location\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 560,
        "wires": [
            [
                "5ce186c476e11357"
            ]
        ]
    },
    {
        "id": "5ce186c476e11357",
        "type": "http response",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "statusCode": "301",
        "headers": {},
        "x": 1840,
        "y": 560,
        "wires": []
    },
    {
        "id": "e15c542c11a1295c",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "add /index.html",
        "func": "msg.filename = msg.filename + (\n  msg.filename.endsWith('/') ? '' : '/'\n) + 'index.html'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 420,
        "wires": [
            [
                "eb546102b4e048ed"
            ]
        ]
    },
    {
        "id": "8b201a8e7cc69dc2",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'serving: ' & msg.filename",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 480,
        "wires": []
    },
    {
        "id": "eeb242011576773d",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "serving file-based content",
        "info": "",
        "x": 1450,
        "y": 100,
        "wires": []
    },
    {
        "id": "e79264b784896a31",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "target": "write userregistry",
        "outputs": 1,
        "x": 350,
        "y": 540,
        "wires": [
            [
                "cd689836f2965f20"
            ]
        ]
    },
    {
        "id": "4c6cdd3342ce4bc9",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "target": "write userregistry",
        "outputs": 1,
        "x": 330,
        "y": 720,
        "wires": [
            [
                "410cd89e0af369f3"
            ]
        ]
    },
    {
        "id": "a4c7a577f4a885ac",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "target": "write userregistry",
        "outputs": 1,
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "6edce1733b761832"
            ]
        ],
        "outputLabels": [
            "return"
        ]
    },
    {
        "id": "1bc9130bfe47b1ce",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie auth",
        "target": "cookie auth",
        "outputs": 2,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "40a3c7a34f053d97"
            ],
            [
                "9dd4030d85f45096"
            ]
        ]
    },
    {
        "id": "c6b8fe651b5d9e1a",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie auth",
        "target": "cookie auth",
        "outputs": 2,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "9d2993165c9031c3"
            ],
            [
                "cd689836f2965f20"
            ]
        ]
    },
    {
        "id": "a5bb2fae82fb060e",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie auth",
        "target": "cookie auth",
        "outputs": 2,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "58ca10af96f0ad31"
            ],
            [
                "410cd89e0af369f3"
            ]
        ]
    },
    {
        "id": "cd044e23aa4655ac",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie login",
        "target": "cookie login",
        "outputs": 2,
        "x": 370,
        "y": 780,
        "wires": [
            [
                "9783beb2630ae8b7"
            ],
            [
                "b785ad6f4e3503fa"
            ]
        ]
    },
    {
        "id": "013ebfbe298d9376",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "if used without \"node-red-within-express\"",
        "info": "",
        "x": 840,
        "y": 100,
        "wires": []
    },
    {
        "id": "b75545489e4f84af",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 160,
        "wires": [
            [
                "0adc2f5b21039e10"
            ]
        ]
    },
    {
        "id": "4343ce638d42f1b6",
        "type": "file in",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "filename": "./registeredUsers.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 820,
        "y": 280,
        "wires": [
            [
                "0adf06ea07449c7d"
            ]
        ]
    },
    {
        "id": "3bd14c19b8421051",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "4343ce638d42f1b6",
            "0adf06ea07449c7d"
        ],
        "uncaught": false,
        "x": 770,
        "y": 340,
        "wires": [
            [
                "a5f33dd4e907dc15"
            ]
        ]
    },
    {
        "id": "167a0601dcf10155",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not load user registry'",
        "statusType": "jsonata",
        "x": 1170,
        "y": 340,
        "wires": []
    },
    {
        "id": "80d71171dcb5242b",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'user registry available'",
        "statusType": "jsonata",
        "x": 1190,
        "y": 160,
        "wires": []
    },
    {
        "id": "a5f33dd4e907dc15",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "create in global context",
        "func": "  let UserRegistry = Object.create(null)\n    UserRegistry['node-red'] =  {\n      Roles: ['node-red'],\n      Salt: '4486e8d35b8275020b1301226cc77963',\n      Hash: 'ab2b740ea9148aa4f320af3f3ba60ee2e33bb8039c57eea2b29579ff3f3b16bec2401f19e3c6ed8ad36de432b80b6f973a12c41af5d50738e4bb902d0117df53'\n    }\n  global.set('UserRegistry',UserRegistry)\n\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 340,
        "wires": [
            [
                "167a0601dcf10155",
                "0222d2bcfa0348c4"
            ]
        ]
    },
    {
        "id": "1fa5c24ad0356c01",
        "type": "file",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "filename": "./registeredUsers.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1080,
        "y": 460,
        "wires": [
            [
                "72cb1bf452fc3e4c"
            ]
        ]
    },
    {
        "id": "dbb34431c89e7b2c",
        "type": "catch",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "scope": [
            "1fa5c24ad0356c01"
        ],
        "uncaught": false,
        "x": 770,
        "y": 580,
        "wires": [
            [
                "b047b831ee0deb92",
                "d376e42f56966749"
            ]
        ]
    },
    {
        "id": "b047b831ee0deb92",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not write user registry'",
        "statusType": "jsonata",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "72cb1bf452fc3e4c",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 520,
        "wires": [
            [
                "5d2d79672b06afbe"
            ]
        ]
    },
    {
        "id": "d376e42f56966749",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "report in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Internal Server Error'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 580,
        "wires": [
            [
                "5d2d79672b06afbe"
            ]
        ]
    },
    {
        "id": "0adf06ea07449c7d",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "write to global context",
        "func": "  let UserSet = JSON.parse(msg.payload)                             // may fail!\n\n  let UserRegistry = Object.create(null)\n  for (let UserId in UserSet) {\n    if (UserSet.hasOwnProperty(UserId)) {\n      if ((UserId.indexOf('/') >= 0) || (UserId.indexOf(':') >= 0)) {\n        throw 'Invalid character in UserId found'\n      }\n      \n      UserRegistry[UserId.toLowerCase()] = UserSet[UserId]\n    }\n  }\n  global.set('UserRegistry',UserRegistry)\n\n  msg.payload = ''\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "0222d2bcfa0348c4"
            ]
        ]
    },
    {
        "id": "3e1bbd854aa2280f",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 220,
        "wires": [
            [
                "a5f33dd4e907dc15"
            ]
        ]
    },
    {
        "id": "e6a5b74b6084db3d",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 400,
        "wires": [
            [
                "d376e42f56966749"
            ]
        ]
    },
    {
        "id": "3b51345d4750e878",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "read from global context",
        "func": "  let UserRegistry = global.get('UserRegistry')\n  let UserSet = {}\n  for (let UserId in UserRegistry) {\n    if (UserRegistry[UserId] == null) {\n      UserSet[UserId] = null\n    } else {\n      let UserEntry = Object.assign({},UserRegistry[UserId])\n        delete UserEntry.Password     // never write passwords in plain text!\n      UserSet[UserId] = UserEntry\n    }\n  }\n\n  msg.payload = JSON.stringify(UserSet)\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 460,
        "wires": [
            [
                "1fa5c24ad0356c01"
            ]
        ]
    },
    {
        "id": "0222d2bcfa0348c4",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "5d2d79672b06afbe",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 520,
        "wires": []
    },
    {
        "id": "ece5e13752e6381b",
        "type": "reusable-in",
        "z": "80deaf3fb9cfc52d",
        "name": "load or create UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 800,
        "y": 220,
        "wires": [
            [
                "3e1bbd854aa2280f",
                "4343ce638d42f1b6"
            ]
        ]
    },
    {
        "id": "51cae29f5f42f420",
        "type": "reusable-in",
        "z": "80deaf3fb9cfc52d",
        "name": "write UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 770,
        "y": 400,
        "wires": [
            [
                "e6a5b74b6084db3d",
                "3b51345d4750e878"
            ]
        ]
    },
    {
        "id": "0adc2f5b21039e10",
        "type": "reusable",
        "z": "80deaf3fb9cfc52d",
        "name": "",
        "target": "load or create userregistry",
        "outputs": 1,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "80d71171dcb5242b"
            ]
        ]
    },
    {
        "id": "33ce4e311d32161e",
        "type": "comment",
        "z": "80deaf3fb9cfc52d",
        "name": "Cookie-based authorization (w/ expiration)",
        "info": "",
        "x": 840,
        "y": 700,
        "wires": []
    },
    {
        "id": "c68ceb31e7de77ef",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "validate authorization",
        "func": "  let Cookie = ((msg.req.cookies || {}).authorization || '').trim()\n  if (Cookie !== '') {\n    let UserRegistry = global.get('UserRegistry') || Object.create(null)\n\n    let [UserId,Expiration,Digest] = Cookie.split(':')\n      UserId = UserId.toLowerCase()\n    if (\n      (UserId !== '') && (UserId in UserRegistry) && (UserRegistry[UserId] != null) &&\n      /^\\d+$/.test(Expiration) && /^[0-9a-fA-F]+$/.test(Digest)\n    ) {\n      let TokenKey = global.get('TokenKey')\n        const HMAC = crypto.createHmac('sha256',TokenKey)\n        HMAC.update(UserId + ':' + Expiration)\n      let expectedDigest = HMAC.digest('hex')\n\n      if (\n        (Digest === expectedDigest) &&\n        (parseInt(Expiration,10) >= Date.now())\n      ) {\n        let UserRoles = UserRegistry[UserId].Roles || []\n        if (\n          (msg.requiredRole == null) ||\n          (UserRoles.indexOf(msg.requiredRole) >= 0)\n        ) {\n          msg.authenticatedUser = UserId\n          msg.authorizedRoles   = UserRegistry[UserId].Roles || []\n\n          msg.cookies = msg.cookies || {}\n          msg.cookies.authorization = Cookie\n          return [msg,null]                                      // authorized\n        } else {\n          msg.cookies = msg.cookies || {}\n          msg.cookies.authorization = null\n\n          msg.payload    = 'Unauthorized'\n          msg.statusCode = 401\n          return [null,msg]                                    // not authorized\n        }\n      }\n    }\n  }\n\n  msg.cookies = msg.cookies || {}\n  msg.cookies.authorization = null\n\n  msg.payload    = 'Unauthorized'\n  msg.statusCode = 401\n  return [null,msg]                                            // not authorized\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 820,
        "y": 960,
        "wires": [
            [
                "46a1552f740e2c73"
            ],
            [
                "84d7c0ce00b3fd1e"
            ]
        ]
    },
    {
        "id": "f21e0f80cabb32f3",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "validate credentials",
        "func": "  let UserId   = (msg.payload.UserId  || '').toLowerCase()\n  let Password = msg.payload.Password || ''\n\n  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  if ((UserId in UserRegistry) && (UserRegistry[UserId] != null)) {\n    let UserSpecs = UserRegistry[UserId]\n\n    if (UserSpecs.Password === Password) {              // internal optimization\n      return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n    }\n\n    let PBKDF2Iterations = global.get('PBKDF2Iterations') || 100000\n    crypto.pbkdf2(\n      Password, Buffer.from(UserSpecs.Salt,'hex'), PBKDF2Iterations, 64, 'sha512',\n      function (Error, computedHash) {console.log('>>>> Hash',computedHash.toString('hex'))\n        if ((Error == null) && (computedHash.toString('hex') === UserSpecs.Hash)) {\n          UserSpecs.Password = Password       // speeds up future auth. requests\n          return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n        } else {\n          return withoutAuthorization()\n        }\n      }\n    )\n  } else {\n    return withoutAuthorization()\n  }\n\n  function withAuthorizationOf (UserName, UserRoles) {\n    if ((msg.requiredRole == null) || (UserRoles.indexOf(msg.requiredRole) >= 0)) {\n      msg.authenticatedUser = UserId\n      msg.authorizedRoles   = UserRoles\n\n      node.send([msg,null])\n      node.done()\n    } else {\n      return withoutAuthorization()\n    }\n  }\n\n  function withoutAuthorization () {\n    msg.cookies = msg.cookies || {}\n    msg.cookies.authorization = { value:null }\n\n    msg.payload    = 'Unauthorized'\n    msg.statusCode = 401\n\n    node.send([null,msg])\n    node.done()\n  }\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "5030aeb6b809ee6a"
            ],
            [
                "52b645454e2a02a1"
            ]
        ]
    },
    {
        "id": "19b19502f99ae00e",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 770,
        "y": 820,
        "wires": [
            [
                "4d2f2651d85d1b0f"
            ]
        ]
    },
    {
        "id": "4d2f2651d85d1b0f",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "generate Token Key",
        "func": "  let TokenKey = global.get('TokenKey')\n  if (TokenKey == null) {     // do not change TokenKey upon Node-RED deployment\n    global.set('TokenKey',crypto.randomBytes(16).toString('hex'))\n  }\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 980,
        "y": 820,
        "wires": [
            [
                "78c74c4aa6db364b"
            ]
        ]
    },
    {
        "id": "78c74c4aa6db364b",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'token key generated'",
        "statusType": "jsonata",
        "x": 1190,
        "y": 820,
        "wires": []
    },
    {
        "id": "5030aeb6b809ee6a",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "create token",
        "func": "  let Expiration   = Date.now() + global.get('TokenLifetime')\n  let TokenContent = msg.authenticatedUser + ':' + Expiration\n\n  let TokenKey = global.get('TokenKey')\n    const HMAC = crypto.createHmac('sha256',TokenKey)\n    HMAC.update(TokenContent)\n  let Digest = HMAC.digest('hex')\n\n  msg.cookies = msg.cookies || {}\n  msg.cookies.authorization = { value:TokenContent + ':' + Digest }\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 1010,
        "y": 1020,
        "wires": [
            [
                "345e7b0db67a93f4"
            ]
        ]
    },
    {
        "id": "46a1552f740e2c73",
        "type": "function",
        "z": "80deaf3fb9cfc52d",
        "name": "refresh token",
        "func": "  let Expiration   = Date.now() + global.get('TokenLifetime')\n  let TokenContent = msg.authenticatedUser + ':' + Expiration\n\n  let TokenKey = global.get('TokenKey')\n    const HMAC = crypto.createHmac('sha256',TokenKey)\n    HMAC.update(TokenContent)\n  let Digest = HMAC.digest('hex')\n\n  msg.cookies = msg.cookies || {}\n  msg.cookies.authorization = { value:TokenContent + ':' + Digest }\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 990,
        "y": 900,
        "wires": [
            [
                "95c488aae40eb5d2"
            ]
        ]
    },
    {
        "id": "62f367bbf862ea79",
        "type": "inject",
        "z": "80deaf3fb9cfc52d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 770,
        "y": 760,
        "wires": [
            [
                "f0b240b78b1dda0b"
            ]
        ]
    },
    {
        "id": "f0b240b78b1dda0b",
        "type": "change",
        "z": "80deaf3fb9cfc52d",
        "name": "set token lifetime",
        "rules": [
            {
                "t": "set",
                "p": "TokenLifetime",
                "pt": "global",
                "to": "2*60*1000",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TokenLifetime",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 760,
        "wires": [
            [
                "55429fdc1fedc59d"
            ]
        ]
    },
    {
        "id": "55429fdc1fedc59d",
        "type": "debug",
        "z": "80deaf3fb9cfc52d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 1190,
        "y": 760,
        "wires": []
    },
    {
        "id": "6d525b9f169488f7",
        "type": "reusable-in",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie auth",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 750,
        "y": 900,
        "wires": [
            [
                "c68ceb31e7de77ef"
            ]
        ]
    },
    {
        "id": "ab814b852868611f",
        "type": "reusable-in",
        "z": "80deaf3fb9cfc52d",
        "name": "cookie login",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "f21e0f80cabb32f3"
            ]
        ]
    },
    {
        "id": "95c488aae40eb5d2",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "authorized",
        "position": 1,
        "x": 1170,
        "y": 900,
        "wires": []
    },
    {
        "id": "84d7c0ce00b3fd1e",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "unauthorized",
        "position": "2",
        "x": 1170,
        "y": 940,
        "wires": []
    },
    {
        "id": "345e7b0db67a93f4",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "success",
        "position": 1,
        "x": 1180,
        "y": 1020,
        "wires": []
    },
    {
        "id": "52b645454e2a02a1",
        "type": "reusable-out",
        "z": "80deaf3fb9cfc52d",
        "name": "failure",
        "position": "2",
        "x": 1190,
        "y": 1060,
        "wires": []
    }
]